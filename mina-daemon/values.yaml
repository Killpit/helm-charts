deployment:
  testnet: "berkeley"
  image: minaprotocol/mina-daemon:1.3.2beta2-release-2.0.0-05c2f73-bulseye-berkeley
  genesisLedgerURL:
  peerListURL: "https://storage.googleapis.com/seed-lists/berkeley_seeds.txt"
  uptime:
    enabled: false
    url:
    sendNodeCommitSha:
  seedPeers: []
    # - /dns4/seed-1.berkeley.o1test.net/tcp/10000/p2p/12D3KooWAdgYL6hv18M3iDBdaK1dRygPivSfAfBNDzie6YqydVbs
    # - /dns4/seed-2.berkeley.o1test.net/tcp/10001/p2p/12D3KooWLjs54xHzVmMmGYb7W5RVibqbwD1co7M2ZMfPgPm7iAag
    # - /dns4/seed-3.berkeley.o1test.net/tcp/10002/p2p/12D3KooWEiGVAFC7curXWXiGZyMWnZK9h8BKr88U8D5PKV3dXciv
  storeBlocks:
    enabled: false
    directory: /blocks
    storageClass:
    sizePVC: 5Gi
    local:
      enabled: false
      filename: precomputed_blocks.json
    aws:
      enabled: false
      bucket:
      prefix:
      accessKeyID:
      secretKeyID:
      defaultRegion:
      uploadInterval: 900
    gcp:
      enabled: false
      bucket: mina_network_block_data
      keyfile: "{}"

node:
  name: "berkeley-node"
  role:
  replicas: 1
  fullname: "berkeley-node"
  exposeGraphql: false
  logLevel: Info
  fileLogLevel: Error
  generateGenesisProof:
  maxConnections: 200
  snarkWorkerFee:
  allPeersSeenMetric:
  archiveRocksDB:
  background:
  bindIP:
  clientTrustList: "10.0.0.0/8"
  contactInfo:
  coinbaseReceiver:
  currentProtocolVersion:
  demoMode:
  directPeer:
  disableNodeStatus:
  enableFlooding:
  enablePeerExchange: true
  discoveryExternalIp:
    enabled: false
    targetDNS: example.nlb.us-west-2.amazonaws.com
  externalIP:
  fileLogRotations:
  gcStatInterval:
  internalTracing:
  isolateNetwork:
  itnGraphQLPort:
  itnKeys:
  itnMaxLogs:
  libp2pMetricsPort:
  limitedGraphQLPort:
  logBlockCreation:
  logPrecomputedBlocks:
  logSnarkWorkGossip:
  logTxnPoolGossip:
  minConnections:
  minBlockReward:
  noSuperCatchup:
  openLimitedGraphQLPort:
  peer:
  peerListFile:
  peerListURL:
  peerProtectionRate:
  precomputedBlocksFile:
  proofLevel:
  proposedProtocolVersion:
  snarkWorkerParallelism:
  stopTime:
  tracing:
  uploadSubmitterKey:
  uploadSubmitterPubkey:
  validationQueueSize:
  workReassignmentWait:
  workSelection:
  metrics:
    enabled: false
    port: 10001
  ports:
    client: 8301
    graphql: 3085
    proxy: 3000
    p2p: 10801
  statsUrl:
  errorsUrl:
  archive:
    enabled: false
    address: staging-berkeley-archive:3086
  libp2pKeys:
    enabled: true
    create: false
    legacy: false
  walletKeys:
    enabled: false
  daemonMode:
    blockProducer: false
    snarkWorker: false
    coordinator: false
    seed: false
  secrets:
    walletPassword: ""
    libp2pPassword: ""
    walletKey: ""
    walletPub: ""
    discoveryLibp2p: ""
    discoveryLibp2pPeerid: ""
  # Snark Worker specific settings - Note that walletKeys.enabled should be set to false.
  daemonAddress: localhost:8301
  shutdownOnDisconnect: false


  extraEnvVars: {}
    # - name: FOO
    #   value: FOO
    # - name: BAR
    #   valueFrom:
    #     secretKeyRef:
    #       name: mySecret
    #       key: bar
serviceAccount:
  annotations: {}

ingress:
  enabled: false
  labels: {}
  annotations: {}
  className: ""
  tls: false
  hosts: []
    # - host: chart-example.local
    #   paths: []
    #    - path: /
    #      pathType: Prefix
    #      backend:
    #        service:
    #          name: chart-example.local
    #          port: 8080

service:
  daemon:
    type: ClusterIP
    annotations: {}
    labels: {}
    loadBalancerClass:
    publishNotReadyAddresses: true
  graphql:
    type: ClusterIP
    loadBalancerClass:
    annotations: {}
    publishNotReadyAddresses: false

podAnnotations: {}

podLabels: {}

updateStrategy:
  type: Recreate

resources:
  memoryRequest: "16.0Gi"
  cpuRequest: "4"
  ephemeralStorageRequest:
  memoryLimit: "16.0Gi"
  cpuLimit: "8"
  ephemeralStorageLimit:

healthcheck:
  enabled: true
  startup:
    periodSeconds: 30
    failureThreshold: 30
  failureThreshold: 10
  periodSeconds: 5
  initialDelaySeconds: 10
  timeoutSeconds: 60

s3BlocksUploader:
  image:
    repository: amazon/aws-cli
    pullPolicy: IfNotPresent
    tag: "latest"
  resources:
    memoryRequest: "128Mi"
    cpuRequest: "1"
    ephemeralStorageRequest:
    memoryLimit: "256Mi"
    cpuLimit: "2"
    ephemeralStorageLimit:

graphqlPublicProxy:
  image:
    repository: 673156464838.dkr.ecr.us-west-2.amazonaws.com/mina-graphql-public-proxy
    pullPolicy: IfNotPresent
    tag: "0.0.11"
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
